#!/bin/bash
#SBATCH --job-name=phrike-khi2d
#SBATCH -p preempt
#SBATCH -N 1
#SBATCH -n 1
#SBATCH -A marlowe-m000115
#SBATCH -G 1
#SBATCH --requeue
#SBATCH --time=01:00:00
#SBATCH --error=error.out
#SBATCH --output=run.out
#SBATCH --mem=64G
#SBATCH --cpus-per-task=16

# Exit on any error
set -e

# Function to log with timestamp
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log "Starting PHRIKE cluster job..."

# Load environment
log "Loading environment..."
source ~/.bashrc
source ~/phrike_env/bin/activate

# Load required modules
log "Loading modules..."
module load slurm
module load cudnn/cuda12/9.3.0.75

# Set up ffmpeg (simple approach)
log "Setting up ffmpeg..."
LOCAL_BIN="$HOME/.local/bin"
mkdir -p "$LOCAL_BIN"

# Check if we already have ffmpeg
if [ ! -f "$LOCAL_BIN/ffmpeg" ]; then
    log "Installing ffmpeg static binary..."
    cd "$LOCAL_BIN"
    
    # Download static ffmpeg binary
    if command -v wget >/dev/null 2>&1; then
        wget -q https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
    elif command -v curl >/dev/null 2>&1; then
        curl -L -o ffmpeg-release-amd64-static.tar.xz https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
    else
        log "Error: Neither wget nor curl available"
        exit 1
    fi
    
    if [ -f "ffmpeg-release-amd64-static.tar.xz" ]; then
        tar -xf ffmpeg-release-amd64-static.tar.xz
        mv ffmpeg-*-amd64-static/ffmpeg .
        mv ffmpeg-*-amd64-static/ffprobe .
        chmod +x ffmpeg ffprobe
        rm -rf ffmpeg-*-amd64-static*
        rm ffmpeg-release-amd64-static.tar.xz
        log "Successfully installed ffmpeg"
    else
        log "Failed to download ffmpeg"
        exit 1
    fi
else
    log "Found existing ffmpeg installation"
fi

# Add to PATH
export PATH="$LOCAL_BIN:$PATH"

# Verify ffmpeg
log "Verifying ffmpeg installation..."
ffmpeg -version | head -n 1

# Verify GPU
log "Checking GPU availability..."
if command -v nvidia-smi >/dev/null 2>&1; then
    nvidia-smi
    log "CUDA_VISIBLE_DEVICES: $CUDA_VISIBLE_DEVICES"
else
    log "Warning: nvidia-smi not found"
fi

# Set up output directory
OUTPUT_DIR="$SCRATCH/khi2d_$(date +%Y%m%d_%H%M%S)"
log "Output directory: $OUTPUT_DIR"
mkdir -p "$OUTPUT_DIR"

# Set environment variables
export CUDA_LAUNCH_BLOCKING=0
export CUDA_CACHE_DISABLE=1
export OMP_NUM_THREADS=16

# Run simulation
log "Starting PHRIKE simulation..."
START_TIME=$(date +%s)

if srun phrike khi2d --config configs/khi2d_cluster.yaml --backend torch --device cuda -v --outdir "$OUTPUT_DIR" --video-quality high --video-fps 30; then
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    log "Simulation completed successfully in ${DURATION} seconds!"
    log "Results saved to: $OUTPUT_DIR"
    
    # Check for video
    if [ -f "$OUTPUT_DIR/khi2d.mp4" ]; then
        log "Video created: $OUTPUT_DIR/khi2d.mp4"
        log "Video size: $(du -h "$OUTPUT_DIR/khi2d.mp4" | cut -f1)"
    else
        log "Video not found, checking frames..."
        if [ -d "$OUTPUT_DIR/frames" ]; then
            FRAME_COUNT=$(find "$OUTPUT_DIR/frames" -name "frame_*.png" | wc -l)
            log "Found $FRAME_COUNT frames"
        fi
    fi
else
    log "Simulation failed"
    exit 1
fi

log "Job completed at $(date)"
